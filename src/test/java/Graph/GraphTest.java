package Graph;

import static org.junit.jupiter.api.Assertions.assertEquals;

import Main.ApplicationRunner;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.util.Objects;

public class GraphTest {
    private static final String[][] MAZE = {
            {".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."},
            {".",".","S",".",".",".","#",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","#",".",".",".",".",".","."},
            {".",".",".",".",".",".","#",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","#",".",".",".",".",".","."},
            {".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","#",".",".",".",".",".","."},
            {".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."},
            {".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."},
            {".",".",".",".",".",".",".",".",".",".",".",".",".",".","#",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."},
            {".",".",".",".",".",".",".",".",".",".",".",".","#",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."},
            {".",".",".",".",".",".",".",".",".",".","#",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."},
            {".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."},
            {".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","#",".",".",".",".",".",".",".",".",".",".","#",".",".","."},
            {".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","#",".",".",".",".","X",".",".",".",".",".","#",".",".","."},
            {".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","#",".",".",".",".",".",".",".",".",".",".","#",".",".","."},
            {".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."}
    };

    private Graph graph;

    @BeforeEach
    void setUp() throws Exception {
        graph = ApplicationRunner.createGraph(MAZE);
    }

    @Test
    @DisplayName("Simple test to find shortest path")
    public void testPathIsLegit() {
        graph.dijkstraAlgorithm(ApplicationRunner.source);
        String shortestPath = graph.shortestPathTo(ApplicationRunner.destination).trim().replace(",", "");

        String[] splitter = ApplicationRunner.source.split("-");
        int startRow = Integer.parseInt(splitter[0]);
        int startCol = Integer.parseInt(splitter[1]);

        for(char c : shortestPath.toCharArray()) {
            if(Objects.equals(c, 'u')) {
                startRow -= 1;
            }
            else if(Objects.equals(c, 'd')) {
                startRow += 1;
            }
            else if(Objects.equals(c, 'l')) {
                startCol -= 1;
            }
            else if(Objects.equals(c, 'r')) {
                startCol += 1;
            }
        }

        assertEquals("X", MAZE[startRow][startCol], "Dijkstra did not found correct path");
    }
}
